{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHTML","css","setCSS","js","setJS","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAwDeA,MAzCf,SAAgBC,GAAO,IAEXC,EAA2CD,EAA3CC,SAAUC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAFnB,EAKKC,oBAAS,GALd,mBAKZC,EALY,KAKNC,EALM,KAWnB,OACI,yBAAKC,UAAS,2BAAsBF,EAAO,GAAK,cAC5C,yBAAKE,UAAU,gBACVN,EACD,4BACIO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAACI,GAAD,OAAeA,OAEtC,kBAAC,IAAD,CACIC,KAAMN,EAAOO,IAAgBC,QAIzC,kBAAC,aAAD,CACIC,eAnBZ,SAAsBC,EAAQC,EAAMd,GAChCC,EAASD,IAmBDA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACLC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,MAAO,WACPC,aAAa,OC7ClB,SAASC,EAAgBC,EAAKC,GACzC,IAAMC,EAHK,iBAGkBF,EAD0B,EAG7BpB,oBAAS,WAC/B,IAAMuB,EAAYC,aAAaC,QAAQH,GAEvC,OAAiB,MAAbC,EACOG,KAAKC,MAAMJ,GAGM,oBAAjBF,EACAA,IAEAA,KAbwC,mBAGhDvB,EAHgD,KAGzC8B,EAHyC,KAqBvD,OAJAC,qBAAU,WACNL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAClD,CAACwB,EAAaxB,IAEV,CAACA,EAAO8B,GCuCJI,MA1Df,WAAgB,IAAD,EACab,EAAgB,OAAQ,IADrC,mBACJc,EADI,KACEC,EADF,OAEWf,EAAgB,MAAO,IAFlC,mBAEJgB,EAFI,KAECC,EAFD,OAGSjB,EAAgB,KAAM,IAH/B,mBAGJkB,EAHI,KAGAC,EAHA,OAKiBtC,mBAAS,IAL1B,mBAKJuC,EALI,KAKIC,EALJ,KAsBX,OAdAX,qBAAU,WACN,IAAMY,EAAUC,YAAW,WACvBF,EAAU,+CAAD,OAEGP,EAFH,2CAGIE,EAHJ,6CAIKE,EAJL,gDAOV,KAEH,OAAO,kBAAMM,aAAaF,MAC3B,CAACR,EAAME,EAAKE,IAGX,oCACI,yBAAKlC,UAAU,iBACX,kBAAC,EAAD,CACIP,SAAS,MACTC,YAAY,OACZC,MAAOmC,EACPlC,SAAUmC,IAEd,kBAAC,EAAD,CACItC,SAAS,MACTC,YAAY,MACZC,MAAOqC,EACPpC,SAAUqC,IAEd,kBAAC,EAAD,CACIxC,SAAS,MACTC,YAAY,aACZC,MAAOuC,EACPtC,SAAUuC,KAGlB,yBAAKnC,UAAU,QACX,4BACIoC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,YCpD3BC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.9519b7ea.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// styles that we will apply\nimport \"codemirror/lib/codemirror.css\";\n// the theme that we are going to use\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/css/css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\n\n// this is the text editor. It will work with onchange handlers etc\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\n\nfunction Editor(props) {\n    // desctructure props to obtain constants\n    const { language, displayName, value, onChange } = props;\n\n    // create a constant state that ensure all text editors are open\n    const [open, setOpen] = useState(true);\n\n    function handleChange(editor, data, value) {\n        onChange(value);\n    }\n\n    return (\n        <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n            <div className=\"editor-title\">\n                {displayName}\n                <button\n                    type=\"button\"\n                    className=\"expand-collapse-btn\"\n                    onClick={() => setOpen((prevOpen) => !prevOpen)}\n                >\n                    <FontAwesomeIcon\n                        icon={open ? faCompressAlt : faExpandAlt}\n                    />\n                </button>\n            </div>\n            <ControlledEditor\n                onBeforeChange={handleChange}\n                value={value}\n                className=\"code-mirror-wrapper\"\n                options={{\n                    lineWrapping: true,\n                    lint: true,\n                    mode: language,\n                    theme: \"material\",\n                    lineNumbers: true,\n                }}\n            />\n        </div>\n    );\n}\n\nexport default Editor;\n","import { useState, useEffect } from \"react\";\n\nconst PREFIX = \"codepen-clone-\";\n\nexport default function useLocalStorage(key, initialValue) {\n    const prefixedKey = PREFIX + key;\n\n    const [value, setValue] = useState(() => {\n        const jsonValue = localStorage.getItem(prefixedKey);\n\n        if (jsonValue != null) {\n            return JSON.parse(jsonValue);\n        }\n\n        if (typeof initialValue === \"function\") {\n            return initialValue();\n        } else {\n            return initialValue;\n        }\n    });\n\n    useEffect(() => {\n        localStorage.setItem(prefixedKey, JSON.stringify(value));\n    }, [prefixedKey, value]);\n\n    return [value, setValue];\n}\n","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./Editor\";\n\n// utilise the custom hook for storing values in local storage\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nfunction App() {\n    const [html, setHTML] = useLocalStorage(\"html\", \"\");\n    const [css, setCSS] = useLocalStorage(\"css\", \"\");\n    const [js, setJS] = useLocalStorage(\"js\", \"\");\n\n    const [srcDoc, setSrcDoc] = useState(\"\");\n    // create a timer to update the page every .250 seconds\n    // anytime, out HTML,CSS, JS changes...run the timeout and then refresh\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSrcDoc(`\n            <html>\n                <body>${html}</body>\n                <style>${css}</style>\n                <script>${js}</script>\n            </html>\n        `);\n        }, 250);\n\n        return () => clearTimeout(timeout);\n    }, [html, css, js]);\n\n    return (\n        <>\n            <div className=\"pane top-pane\">\n                <Editor\n                    language=\"xml\"\n                    displayName=\"HTML\"\n                    value={html}\n                    onChange={setHTML}\n                />\n                <Editor\n                    language=\"xml\"\n                    displayName=\"CSS\"\n                    value={css}\n                    onChange={setCSS}\n                />\n                <Editor\n                    language=\"xml\"\n                    displayName=\"JavaScript\"\n                    value={js}\n                    onChange={setJS}\n                />\n            </div>\n            <div className=\"pane\">\n                <iframe\n                    srcDoc={srcDoc}\n                    title=\"output\"\n                    sandbox=\"allow-scripts\"\n                    frameBorder=\"0\"\n                    width=\"100%\"\n                    height=\"100%\"\n                ></iframe>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}