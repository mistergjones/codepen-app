{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","console","log","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHTML","css","setCSS","js","setJS","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","className","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRA2DeA,MA5Cf,SAAgBC,GAEuCA,EAA3CC,SAA2CD,EAAjCE,YAAiCF,EAApBG,MAAoBH,EAAbI,SAFnB,MAKKC,oBAAS,GALd,8BCXR,SAASC,EAAgBC,EAAKC,GACzC,IAAMC,EAHK,iBAGkBF,EAD0B,EAG7BF,oBAAS,WAE/B,IAAMK,EAAYC,aAAaC,QAAQH,GAGvC,OAAiB,MAAbC,GACAG,QAAQC,IAAR,wBAAqCC,KAAKC,MAAMN,IACzCK,KAAKC,MAAMN,IAIM,oBAAjBF,GACPK,QAAQC,IAAR,4BAAyCN,KAClCA,MAEPK,QAAQC,IAAR,wBAAqCN,GAC9BA,MAnBwC,mBAGhDL,EAHgD,KAGzCc,EAHyC,KA6BvD,OALAC,qBAAU,WAENP,aAAaQ,QAAQV,EAAaM,KAAKK,UAAUjB,MAClD,CAACM,EAAaN,IAEV,CAACA,EAAOc,GCgCJI,MA3Df,WAAgB,IAAD,EACaf,EAAgB,OAAQ,IADrC,mBACJgB,EADI,KACEC,EADF,OAEWjB,EAAgB,MAAO,IAFlC,mBAEJkB,EAFI,KAECC,EAFD,OAGSnB,EAAgB,KAAM,IAH/B,mBAGJoB,EAHI,KAGAC,EAHA,OAKiBtB,mBAAS,IAL1B,mBAKJuB,EALI,KAKIC,EALJ,KAsBX,OAdAX,qBAAU,WACN,IAAMY,EAAUC,YAAW,WACvBF,EAAU,+CAAD,OAEGP,EAFH,2CAGIE,EAHJ,6CAIKE,EAJL,gDAOV,KAEH,OAAO,kBAAMM,aAAaF,MAC3B,CAACR,EAAME,EAAKE,IAGX,oCACI,yBAAKO,UAAU,iBACX,kBAAC,EAAD,CACIhC,SAAS,MACTC,YAAY,OACZC,MAAOmB,EACPlB,SAAUmB,IAEd,kBAAC,EAAD,CACItB,SAAS,MACTC,YAAY,MACZC,MAAOqB,EACPpB,SAAUqB,IAEd,kBAAC,EAAD,CACIxB,SAAS,MACTC,YAAY,aACZC,MAAOuB,EACPtB,SAAUuB,KAGlB,yBAAKM,UAAU,QACX,4BACIL,OAAQA,EACRM,MAAM,SAENC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,YCrD3BC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.acae7f87.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// styles that we will apply\nimport \"codemirror/lib/codemirror.css\";\n// the theme that we are going to use\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/css/css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\n\n// this is the text editor. It will work with onchange handlers etc\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\n\nfunction Editor(props) {\n    // desctructure props to obtain constants\n    const { language, displayName, value, onChange } = props;\n\n    // create a constant state that ensure all text editors are open\n    const [open, setOpen] = useState(true);\n\n    function handleChange(editor, data, value) {\n        onChange(value);\n    }\n\n    return (\n        // use string interpellation with a function to set an additional CSS Class to be applied if we need to collapse it. i.e. we are adding a class below...we just need to apply the CSS if appropriate\n        <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n            <div className=\"editor-title\">\n                {displayName}\n                <button\n                    type=\"button\"\n                    className=\"expand-collapse-btn\"\n                    // now toggle if we need to collapse one of the editors or not.\n                    // we run a function that toggles the state\n                    onClick={() => setOpen((prevOpen) => !prevOpen)}\n                >\n                    <FontAwesomeIcon\n                        icon={open ? faCompressAlt : faExpandAlt}\n                    />\n                </button>\n            </div>\n            <ControlledEditor\n                onBeforeChange={handleChange}\n                value={value}\n                className=\"code-mirror-wrapper\"\n                options={{\n                    lineWrapping: true,\n                    lint: true,\n                    mode: language,\n                    theme: \"material\",\n                    lineNumbers: true,\n                }}\n            />\n        </div>\n    );\n}\n\nexport default Editor;\n","import { useState, useEffect } from \"react\";\n\nconst PREFIX = \"codepen-clone-\";\n\nexport default function useLocalStorage(key, initialValue) {\n    const prefixedKey = PREFIX + key;\n\n    const [value, setValue] = useState(() => {\n        // get json value from local storage\n        const jsonValue = localStorage.getItem(prefixedKey);\n\n        // if we have a value, return the jsonValue as an object.\n        if (jsonValue != null) {\n            console.log(`Json parse value is: `, JSON.parse(jsonValue));\n            return JSON.parse(jsonValue);\n        }\n\n        // if we don't have one in local storage, we use the initial value of the function version of use state\n        if (typeof initialValue === \"function\") {\n            console.log(`initialValue function is `, initialValue());\n            return initialValue();\n        } else {\n            console.log(`plain initialValue is`, initialValue);\n            return initialValue;\n        }\n    });\n\n    // setup a useEffect for what happens every time we change a value. i.e. update the local storage\n    useEffect(() => {\n        // set the tiem and the previxed key as teh string version of the value\n        localStorage.setItem(prefixedKey, JSON.stringify(value));\n    }, [prefixedKey, value]);\n\n    return [value, setValue];\n}\n","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./Editor\";\n\n// utilise the custom hook for storing values in local storage\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nfunction App() {\n    const [html, setHTML] = useLocalStorage(\"html\", \"\");\n    const [css, setCSS] = useLocalStorage(\"css\", \"\");\n    const [js, setJS] = useLocalStorage(\"js\", \"\");\n\n    const [srcDoc, setSrcDoc] = useState(\"\");\n    // create a timer to update the page every .250 seconds\n    // anytime, out HTML,CSS, JS changes...run the timeout and then refresh\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSrcDoc(`\n            <html>\n                <body>${html}</body>\n                <style>${css}</style>\n                <script>${js}</script>\n            </html>\n        `);\n        }, 250);\n\n        return () => clearTimeout(timeout);\n    }, [html, css, js]);\n\n    return (\n        <>\n            <div className=\"pane top-pane\">\n                <Editor\n                    language=\"xml\"\n                    displayName=\"HTML\"\n                    value={html}\n                    onChange={setHTML}\n                />\n                <Editor\n                    language=\"xml\"\n                    displayName=\"CSS\"\n                    value={css}\n                    onChange={setCSS}\n                />\n                <Editor\n                    language=\"xml\"\n                    displayName=\"JavaScript\"\n                    value={js}\n                    onChange={setJS}\n                />\n            </div>\n            <div className=\"pane\">\n                <iframe\n                    srcDoc={srcDoc}\n                    title=\"output\"\n                    // allow to only run scripts\n                    sandbox=\"allow-scripts\"\n                    frameBorder=\"0\"\n                    width=\"100%\"\n                    height=\"100%\"\n                ></iframe>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}